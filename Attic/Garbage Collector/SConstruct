import os, sys
from SCons.Script.SConscript import SConsEnvironment


def BuildTool(env):
    tools = env['TOOLS']
    
    # The order of each alias is important.
    aliases = {
        'GNU': ['mingw', 'g++', 'gcc'],
        'MSVC': ['msvc'],
    }
    
    for (name, aliases) in aliases.items():
        for alias in aliases:
            if alias in tools:
                return (name, alias)


def EmbedManifest(env, target):
    (EXE_TYPE, DLL_TYPE) = (1, 2)
    
    file_type = EXE_TYPE if str(target).endswith('.exe') else DLL_TYPE
    manifest = '-manifest ${TARGET}.manifest'
    output = '-outputresource:$TARGET;' + str(file_type)
    
    env.AddPostAction(target, 'mt -nologo %s %s' % (manifest, output))
    env.Clean(target, '%s.manifest' % target)


def Files(env, pattern, root = os.curdir, recursive = False, variant = None):
    files = env.Glob(os.path.join(root, pattern), strings = True)
    
    if variant is not None:
        files = [os.path.join(variant, f) for f in files]
    
    if recursive:
        for name in os.listdir(root):
            path = os.path.join(root, name)
            
            if os.path.isdir(path):
                files.extend(Files(env, pattern, path, recursive, variant))
    
    return files


def FindSConscript(name = 'SConscript'):
    if os.path.exists(name):
        return name
    
    paths = os.listdir(os.curdir)
    paths.sort()
    
    for path in paths:
        if os.path.isdir(path):
            file = os.path.join(path, name)
            
            if os.path.exists(file):
                return file


SConsEnvironment.BuildTool = BuildTool
SConsEnvironment.EmbedManifest = EmbedManifest
SConsEnvironment.Files = Files

script = FindSConscript()

if script is None:
    sys.exit('No main file found: ' + script)
else:
    print 'Auto-detected main file: ' + script
    SConscript(script)

if GetOption('clean'):
    Execute(Delete('.sconsign.dblite'))
